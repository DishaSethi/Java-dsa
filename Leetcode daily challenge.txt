Maximum score after splitting the string:


My solution:
class Solution {
    public int maxScore(String s) {
        int max=0;
String  right="";
String left="";




        for(int i=0;i<s.length();i++){
left=s.substring(i,i+1);
right=s.substring(i+1,s.length());
int count=0;
 int count0=0;
     int count1=0;
     int z=0;
for(int j=0;j<s.length();j++){
    //count for left
//    int l=0;
//    int r=0;


    if(j<left.length()){
if(left.charAt(j)=='0'){
    count0++;
   
}
    }
    //count for righht
   
   if(j>=left.length() ){
     
        if(right.charAt(z)=='1'){
count1++;




}z++;
    }
   
}
 count=count0+count1;
    if(count>max){
        max=count;
    }
        }
        return max;
    }
}




Path crossing:
Best Solution:


class Solution {
    public boolean isPathCrossing(String path) {
        Map<Character,Pair<Integer,Integer>> moves= new HashMap();


        moves.put('N',new Pair(0,1));
        moves.put('S',new Pair(0,-1));
         moves.put('W',new Pair(-1,0));
          moves.put('E',new Pair(1,0));


          Set<Pair<Integer,Integer>> visited=new HashSet();


          visited.add(new Pair(0,0));
          int x=0;
          int y=0;


          for(Character c:path.toCharArray()){
              Pair<Integer,Integer> curr=moves.get(c);


              int dx=curr.getKey();
              int dy=curr.getValue();


              x+=dx;
              y+=dy;


              Pair<Integer,Integer> pair=new Pair(x,y);
if(visited.contains(pair)){
    return true;
}
visited.add(pair);


          }
          return false;
    }
}


December 24
Minimum changes to make alternating binary string


My soln:
class Solution {
    public int minOperations(String s) {
        int count0=0;
        int count1=0;
     
        for(int i=0;i<s.length();i++){
if(i%2==0){
    if(s.charAt(i)!='0'){
        count0++;
    }
   
}else{
    if(s.charAt(i)!='1'){
        count0++;
    }
}
        }






        for(int i=0;i<s.length();i++){
if(i%2==0){
    if(s.charAt(i)!='1'){
        count1++;
    }
   
}else{
    if(s.charAt(i)!='0'){
        count1++;
    }
}
        }


        return Math.min(count0,count1);
     
    }
}




Most optimised soln:


public int minOperations(String s) {
    int swaps = 0;
    for (int i = 0; i < s.length(); i++) {
        if (i % 2 == 0)
            swaps += s.charAt(i) == '0' ? 0 : 1;
        else
            swaps += s.charAt(i) == '1' ? 0 : 1;
    }
    return Math.min(swaps, s.length() - swaps);
}
As count1+count0=s.length(); so this one is better;


Decode ways(Dp question-revision needed)


Recursion solution (TLE - Dont Run)
class Solution {
    public int numDecodings(String s) {
        return recursiveDecode(s, 0);
    }


    private int recursiveDecode(String s, int index) {
        // Base case: if the index reaches the end of the string
        if (index == s.length()) {
            return 1; // This is a valid decoding
        }


        // Check for leading zero
        if (s.charAt(index) == '0') {
            return 0; // This decoding is invalid
        }


        // Decode single digit
        int ways = recursiveDecode(s, index + 1);


        // Decode two digits if possible
        if (index + 1 < s.length() && Integer.parseInt(s.substring(index, index + 2)) <= 26) {
            ways += recursiveDecode(s, index + 2);
        }


        return ways;
    }
}


Top down(DP)
class Solution {
    public int numDecodings(String s) {
        int[] memo = new int[s.length()];
        Arrays.fill(memo, -1);
        return topDownDecode(s, 0, memo);
    }


    private int topDownDecode(String s, int index, int[] memo) {
        // Base case: if the index reaches the end of the string
        if (index == s.length()) {
            return 1; // This is a valid decoding
        }


        // Check memoization table
        if (memo[index] != -1) {
            return memo[index];
        }


        // Check for leading zero
        if (s.charAt(index) == '0') {
            return 0; // This decoding is invalid
        }


        // Decode single digit
        int ways = topDownDecode(s, index + 1, memo);


        // Decode two digits if possible
        if (index + 1 < s.length() && Integer.parseInt(s.substring(index, index + 2)) <= 26) {
            ways += topDownDecode(s, index + 2, memo);
        }


        // Memoize the result
        memo[index] = ways;


        return ways;
    }
}


Bottom up (DP)
class Solution {
    public int numDecodings(String s) {
        int n = s.length();
        if (n == 0) {
            return 0;
        }


        // Initialize the DP array
        int[] dp = new int[n + 1];
        dp[n] = 1; // There is one way to decode an empty string


        // Fill in the DP array from right to left
        for (int i = n - 1; i >= 0; i--) {
            // Check for leading zero
            if (s.charAt(i) == '0') {
                dp[i] = 0;
            } else {
                // Decode single digit
                dp[i] += dp[i + 1];


                // Decode two digits if possible
                if (i + 1 < n && Integer.parseInt(s.substring(i, i + 2)) <= 26) {
                    dp[i] += dp[i + 2];
                }
            }
        }


        return dp[0];
    }
}


December 30
Redistribute characters to make all strings equal(easy)
My soln:
class Solution {
    public boolean makeEqual(String[] words) {
        if(words.length==1){
            return true;
        }
        HashMap<Character,Integer> freq=new HashMap<>();
        for(int i=0;i<words.length;i++){
            for(int j=0;j<words[i].length();j++){
                if(freq.containsKey(words[i].charAt(j))){
                   int count=freq.get(words[i].charAt(j));
                    freq.put(words[i].charAt(j),count+1);
                }
                else{
                    freq.put(words[i].charAt(j),1);
                }
            }
        }


boolean ans=false;
Set<Character> keys=freq.keySet();


        for(Character key:keys){
int val=freq.get(key);
if(val%words.length!=0 ){
    ans=false;
    break;
}else{
    ans=true;
}
        }
        return ans;
    }
}


Other Soln:
class Solution {
    public boolean makeEqual(String[] words) {
      if (words.length == 1) {
            return true;
        }
        int totalCharCount = 0;
        for (String s : words) {
            totalCharCount += s.length();
        }
        if (totalCharCount % words.length != 0) {
            return false;
        }


        int[] myMap = new int[26];
        for (String s : words) {
            for (char c : s.toCharArray()) {
                myMap[c - 'a']++;
            }
        }
        for (int i : myMap) {
            if (i % words.length != 0) {
                return false;
            }
        }
        return true;
    }
}